// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: __RONLexer.flex

package com.github.madwareru.intellijronremix.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.madwareru.intellijronremix.language.psi.RONTypes.*;


public class __RONLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_RAW_STRING = 2;
  public static final int IN_RAW_STRING_SUFFIX = 4;
  public static final int IN_BLOCK_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\5"+
    "\1\6\1\7\3\0\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\14\1\16\1\17\1\20\1\21\6\22\2\23"+
    "\1\24\6\0\1\25\1\26\1\27\1\30\1\31\1\30"+
    "\1\32\1\33\1\34\1\33\1\35\1\36\1\37\1\40"+
    "\1\41\2\33\1\42\1\43\1\44\2\33\1\45\3\33"+
    "\1\46\1\47\1\50\1\0\1\51\1\0\1\52\1\53"+
    "\2\30\1\54\1\55\2\33\1\56\2\33\1\57\1\60"+
    "\1\61\1\62\2\33\1\63\1\64\1\65\1\66\2\33"+
    "\1\67\2\33\1\70\1\0\1\71\7\0\1\3\32\0"+
    "\1\1\u01df\0\1\1\177\0\13\1\35\0\2\3\5\0"+
    "\1\1\57\0\1\1\240\0\1\1\377\0\u0100\72";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\3\1\1\3\1\4\1\1\1\5"+
    "\2\1\2\6\1\7\5\10\1\11\1\12\4\10\1\13"+
    "\1\14\1\15\1\16\1\17\1\15\1\0\1\20\7\0"+
    "\1\21\1\22\1\23\1\6\3\0\6\10\1\24\1\0"+
    "\1\10\1\25\1\20\1\26\2\27\3\0\3\6\6\10"+
    "\1\0\2\10\1\21\1\0\1\21\1\10\1\30\1\0"+
    "\1\31\1\10\1\32\1\10\1\0\1\10\2\0\1\33"+
    "\7\0\1\34\2\0\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\354\0\354\0\u0213\0\354\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\354\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\354"+
    "\0\354\0\u0461\0\u049c\0\u04d7\0\u0512\0\354\0\354\0\354"+
    "\0\u054d\0\354\0\u0588\0\u0162\0\354\0\u05c3\0\u05fe\0\u0639"+
    "\0\u0674\0\u024e\0\u06af\0\u06ea\0\u0725\0\354\0\u0760\0\u079b"+
    "\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973"+
    "\0\u09ae\0\354\0\u09e9\0\u0a24\0\354\0\u0162\0\354\0\354"+
    "\0\u0639\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\354\0\u0dd4\0\u0dd4\0\u0e0f\0\u033a\0\u0e4a\0\u033a\0\u0e85"+
    "\0\u033a\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u033a\0\u0fe7"+
    "\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\354\0\u1184"+
    "\0\u11bf\0\354";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\4\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\5\1\14\1\15\1\16\1\17\1\20\3\21\1\22"+
    "\1\23\1\24\11\23\1\25\1\23\1\26\1\27\2\23"+
    "\1\30\1\5\1\31\3\23\1\32\1\33\5\23\1\34"+
    "\1\23\1\35\2\23\1\36\1\37\1\5\6\40\1\41"+
    "\64\40\73\42\13\40\1\43\57\40\74\0\4\6\66\0"+
    "\2\44\1\0\3\44\1\45\40\44\1\46\23\44\5\0"+
    "\1\47\65\0\2\50\1\0\3\50\1\0\40\50\1\51"+
    "\23\50\16\0\1\52\1\0\1\20\3\21\14\0\1\53"+
    "\15\0\1\54\34\0\4\55\62\0\1\56\3\0\1\57"+
    "\71\0\1\55\1\0\4\21\25\0\1\60\1\0\1\61"+
    "\6\0\1\62\4\0\1\63\21\0\1\55\1\0\4\21"+
    "\25\0\1\60\41\0\4\23\1\0\21\23\3\0\17\23"+
    "\23\0\4\23\1\0\11\23\1\64\7\23\3\0\17\23"+
    "\23\0\4\23\1\0\21\23\3\0\11\23\1\65\5\23"+
    "\23\0\4\23\1\0\1\66\20\23\3\0\17\23\23\0"+
    "\4\23\1\0\21\23\3\0\11\23\1\67\5\23\23\0"+
    "\4\23\1\0\21\23\3\0\10\23\1\70\6\23\23\0"+
    "\4\23\1\0\21\23\3\0\1\23\1\71\15\23\11\0"+
    "\1\72\1\73\10\0\4\23\1\0\21\23\3\0\17\23"+
    "\23\0\4\23\1\0\21\23\3\0\12\23\1\74\4\23"+
    "\12\0\1\41\102\0\1\75\53\0\2\44\1\0\3\44"+
    "\1\76\40\44\1\46\23\44\46\0\1\77\34\0\1\100"+
    "\62\0\1\50\4\0\3\50\1\101\62\50\52\0\1\102"+
    "\101\0\1\103\31\0\4\55\5\0\1\104\22\0\1\104"+
    "\16\0\2\57\2\0\66\57\21\0\4\60\25\0\1\60"+
    "\41\0\2\105\71\0\3\106\70\0\4\107\1\0\5\107"+
    "\20\0\4\107\35\0\4\23\1\0\14\23\1\110\4\23"+
    "\3\0\17\23\23\0\4\23\1\0\21\23\3\0\10\23"+
    "\1\111\6\23\23\0\4\23\1\0\20\23\1\112\3\0"+
    "\17\23\23\0\4\23\1\0\21\23\3\0\7\23\1\113"+
    "\7\23\23\0\4\23\1\0\21\23\3\0\1\23\1\114"+
    "\15\23\23\0\4\23\1\0\21\23\3\0\6\23\1\115"+
    "\10\23\11\0\1\72\1\116\4\0\1\117\1\0\1\117"+
    "\1\0\4\117\1\0\21\117\3\0\17\117\23\0\4\23"+
    "\1\0\21\23\3\0\15\23\1\120\1\23\43\0\1\121"+
    "\107\0\1\121\31\0\1\122\3\0\4\123\67\0\2\105"+
    "\27\0\1\105\41\0\3\106\26\0\1\106\41\0\4\107"+
    "\1\0\5\107\17\0\5\107\35\0\4\23\1\0\2\23"+
    "\1\124\16\23\3\0\17\23\23\0\4\23\1\0\21\23"+
    "\3\0\3\23\1\125\13\23\7\0\1\126\13\0\4\23"+
    "\1\0\21\23\3\0\17\23\23\0\4\23\1\0\21\23"+
    "\3\0\3\23\1\127\13\23\23\0\4\23\1\0\21\23"+
    "\3\0\2\23\1\130\14\23\23\0\4\23\1\0\21\23"+
    "\3\0\13\23\1\120\3\23\11\0\1\72\1\116\77\0"+
    "\1\117\1\0\1\117\1\0\4\117\1\0\21\117\3\0"+
    "\17\117\23\0\4\23\1\0\21\23\3\0\3\23\1\131"+
    "\13\23\23\0\4\123\67\0\4\23\1\0\10\23\1\132"+
    "\10\23\3\0\17\23\46\0\1\133\47\0\4\23\1\0"+
    "\21\23\3\0\6\23\1\134\10\23\7\0\1\135\13\0"+
    "\4\23\1\0\21\23\3\0\17\23\47\0\1\136\46\0"+
    "\4\23\1\0\21\23\3\0\3\23\1\137\13\23\32\0"+
    "\1\140\105\0\1\141\71\0\1\142\65\0\1\143\75\0"+
    "\1\144\73\0\1\145\71\0\1\146\65\0\1\147\71\0"+
    "\1\150\101\0\1\151\76\0\1\152\26\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4602];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\2\11\1\1\1\11\4\1\1\11"+
    "\5\1\2\11\4\1\3\11\1\1\1\11\1\1\1\0"+
    "\1\11\7\0\1\1\1\11\2\1\3\0\6\1\1\11"+
    "\1\0\1\1\1\11\1\1\2\11\1\1\3\0\11\1"+
    "\1\0\2\1\1\11\1\0\3\1\1\0\4\1\1\0"+
    "\1\1\2\0\1\1\7\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public __RONLexer() {
    this((java.io.Reader)null);
  }
  private int zzShaStride = -1;

  private int zzPostponedMarkedPos = -1;
  IElementType imbueRawLiteral() {
    yybegin(YYINITIAL);

    zzStartRead = zzPostponedMarkedPos;
    zzShaStride = -1;
    zzPostponedMarkedPos = -1;

    return RAW_STRING;
  }

  IElementType imbueBlockComment() {
    yybegin(YYINITIAL);

    zzStartRead = zzPostponedMarkedPos;
    zzPostponedMarkedPos = -1;

    return BLOCK_COMMENT;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public __RONLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_RAW_STRING: {
              return imbueRawLiteral();
            }  // fall though
            case 107: break;
            case IN_RAW_STRING_SUFFIX: {
              return imbueRawLiteral();
            }  // fall though
            case 108: break;
            case IN_BLOCK_COMMENT: {
              return imbueBlockComment();
            }  // fall though
            case 109: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 30: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 31: break;
          case 3:
            { return PARENTHESISL;
            }
          // fall through
          case 32: break;
          case 4:
            { return PARENTHESISR;
            }
          // fall through
          case 33: break;
          case 5:
            { return COMMA;
            }
          // fall through
          case 34: break;
          case 6:
            { return INTEGER;
            }
          // fall through
          case 35: break;
          case 7:
            { return COLON;
            }
          // fall through
          case 36: break;
          case 8:
            { return IDENT;
            }
          // fall through
          case 37: break;
          case 9:
            { return BRACKETL;
            }
          // fall through
          case 38: break;
          case 10:
            { return BRACKETR;
            }
          // fall through
          case 39: break;
          case 11:
            { return BRACEL;
            }
          // fall through
          case 40: break;
          case 12:
            { return BRACER;
            }
          // fall through
          case 41: break;
          case 13:
            { 
            }
          // fall through
          case 42: break;
          case 14:
            { int shaExcess = yylength() - 1 - zzShaStride;
                          if (shaExcess >= 0) {
                              yybegin(IN_RAW_STRING_SUFFIX);
                              yypushback(shaExcess);
                          }
            }
          // fall through
          case 43: break;
          case 15:
            { yypushback(1);
                          return imbueRawLiteral();
            }
          // fall through
          case 44: break;
          case 16:
            { return STRING;
            }
          // fall through
          case 45: break;
          case 17:
            { return FLOAT;
            }
          // fall through
          case 46: break;
          case 18:
            { yybegin(IN_BLOCK_COMMENT);
                         yypushback(2);
            }
          // fall through
          case 47: break;
          case 19:
            { return COMMENT;
            }
          // fall through
          case 48: break;
          case 20:
            { yybegin(IN_RAW_STRING);
                          zzPostponedMarkedPos = zzStartRead;
                          zzShaStride = yylength() - 2;
            }
          // fall through
          case 49: break;
          case 21:
            { return imbueBlockComment();
            }
          // fall through
          case 50: break;
          case 22:
            { return EXT_PREFIX;
            }
          // fall through
          case 51: break;
          case 23:
            { return CHAR;
            }
          // fall through
          case 52: break;
          case 24:
            { return NONE;
            }
          // fall through
          case 53: break;
          case 25:
            { return SOME;
            }
          // fall through
          case 54: break;
          case 26:
            { return BOOLEAN;
            }
          // fall through
          case 55: break;
          case 27:
            { return ENABLE_KEYWORD;
            }
          // fall through
          case 56: break;
          case 28:
            { return RAW_STRING;
            }
          // fall through
          case 57: break;
          case 29:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
