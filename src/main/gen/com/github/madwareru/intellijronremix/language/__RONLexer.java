/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.madwareru.intellijronremix.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.madwareru.intellijronremix.language.psi.RONTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>__RONLexer.flex</tt>
 */
public class __RONLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\2\1\1\2\22\0\1\32\1\31\1\34\1\35\3\31\1\30\1\40\1\41\1\31\1"+
    "\16\1\64\1\16\1\26\1\4\1\17\11\21\1\63\6\31\1\54\1\43\1\46\1\22\1\27\1\22"+
    "\1\60\1\15\1\57\1\15\1\47\1\44\1\50\1\51\1\45\2\15\1\53\1\56\1\52\2\15\1\55"+
    "\3\15\1\36\1\33\1\42\1\31\1\23\1\31\1\12\1\25\2\22\1\10\1\11\5\15\1\13\1\65"+
    "\1\37\1\24\2\15\1\6\1\14\1\5\1\7\2\15\1\20\2\15\1\61\1\31\1\62\1\31\6\0\1"+
    "\1\32\0\1\3\337\0\1\3\177\0\13\3\35\0\2\1\5\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\3\3\1\1\2\4\1\1"+
    "\1\5\3\1\1\6\1\7\1\10\1\11\3\3\1\12"+
    "\1\13\1\14\1\15\1\16\2\3\1\0\1\4\1\0"+
    "\1\17\1\5\3\0\1\20\3\0\5\3\1\4\1\0"+
    "\1\20\1\0\3\3\1\21\1\17\1\0\1\3\1\0"+
    "\1\22\1\0\1\3\21\0\1\23\1\24\5\0\1\25"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\66"+
    "\0\66\0\66\0\66\0\u032a\0\u0360\0\u0396\0\66\0\66"+
    "\0\66\0\66\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0510\0\66\0\u0546\0\u02be\0\u057c\0\66\0\u05b2\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\u02be\0\u07ce\0\u0804\0\u083a\0\u0870\0\u010e\0\u0798\0\u08a6"+
    "\0\u08dc\0\u0912\0\u010e\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20"+
    "\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0"+
    "\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\66\0\u05b2"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\66\0\u0e58";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\3\6\1\7\4\6\1\10"+
    "\1\11\1\6\1\12\4\6\1\13\1\6\1\14\1\2"+
    "\1\3\1\15\1\16\1\17\1\20\1\6\1\21\1\22"+
    "\1\23\1\24\7\6\1\25\2\6\1\26\2\6\1\27"+
    "\1\30\1\31\1\32\1\6\67\0\3\3\26\0\1\3"+
    "\37\0\1\33\66\0\1\6\1\34\7\6\2\0\1\6"+
    "\1\0\4\6\1\0\1\6\7\0\1\6\3\0\16\6"+
    "\4\0\1\6\5\0\11\6\2\0\1\6\1\0\4\6"+
    "\1\0\1\6\7\0\1\6\3\0\16\6\4\0\1\6"+
    "\5\0\5\6\1\35\3\6\2\0\1\6\1\0\4\6"+
    "\1\0\1\6\7\0\1\6\3\0\16\6\4\0\1\6"+
    "\17\0\1\11\1\0\1\12\63\0\1\12\1\36\1\12"+
    "\1\0\1\37\2\40\1\41\56\0\1\12\1\0\1\12"+
    "\1\0\1\37\2\0\1\41\56\0\1\41\1\0\1\41"+
    "\50\0\24\42\1\0\2\42\1\0\32\42\33\0\1\43"+
    "\32\0\2\44\1\0\30\44\1\45\1\46\31\44\10\47"+
    "\1\50\25\47\1\51\27\47\5\0\11\6\2\0\1\6"+
    "\1\0\4\6\1\0\1\6\7\0\1\6\3\0\1\6"+
    "\1\52\14\6\4\0\1\6\5\0\11\6\2\0\1\6"+
    "\1\0\4\6\1\0\1\6\7\0\1\6\3\0\11\6"+
    "\1\53\4\6\4\0\1\6\5\0\11\6\2\0\1\6"+
    "\1\0\2\6\1\54\1\6\1\0\1\6\7\0\1\6"+
    "\3\0\16\6\4\0\1\6\1\33\2\0\63\33\5\0"+
    "\2\6\1\55\6\6\2\0\1\6\1\0\4\6\1\0"+
    "\1\6\7\0\1\6\3\0\16\6\4\0\1\6\5\0"+
    "\6\6\1\56\2\6\2\0\1\6\1\0\4\6\1\0"+
    "\1\6\7\0\1\6\3\0\16\6\4\0\1\6\10\0"+
    "\3\57\4\0\1\57\1\0\2\57\2\0\1\57\1\0"+
    "\1\57\13\0\1\57\2\0\1\57\5\0\1\57\30\0"+
    "\1\37\1\0\1\37\1\0\1\37\61\0\1\37\1\0"+
    "\1\37\54\0\1\60\6\0\1\41\1\0\1\41\5\0"+
    "\1\60\66\0\1\42\35\0\2\44\1\0\30\44\1\45"+
    "\1\61\31\44\10\47\1\50\65\47\1\50\26\47\1\62"+
    "\114\47\5\0\11\6\2\0\1\6\1\0\4\6\1\0"+
    "\1\6\7\0\1\6\3\0\2\6\1\63\13\6\4\0"+
    "\1\6\5\0\11\6\2\0\1\6\1\0\4\6\1\0"+
    "\1\6\7\0\1\6\3\0\12\6\1\64\3\6\4\0"+
    "\1\6\5\0\11\6\2\0\1\6\1\0\4\6\1\0"+
    "\1\6\7\0\1\6\3\0\16\6\4\0\1\65\5\0"+
    "\3\6\1\66\5\6\2\0\1\6\1\0\4\6\1\0"+
    "\1\6\7\0\1\6\3\0\16\6\4\0\1\6\5\0"+
    "\7\6\1\55\1\6\2\0\1\6\1\0\4\6\1\0"+
    "\1\6\7\0\1\6\3\0\16\6\4\0\1\6\10\0"+
    "\3\57\4\0\1\57\1\0\3\57\1\0\1\57\1\0"+
    "\1\57\13\0\1\57\2\0\1\57\5\0\1\57\30\0"+
    "\1\67\1\0\1\67\44\0\10\47\1\50\1\47\1\70"+
    "\53\47\5\0\11\6\2\0\1\6\1\0\4\6\1\0"+
    "\1\6\7\0\1\6\3\0\3\6\1\71\12\6\4\0"+
    "\1\6\5\0\11\6\2\0\1\6\1\0\4\6\1\0"+
    "\1\6\2\0\1\72\4\0\1\6\3\0\16\6\4\0"+
    "\1\6\5\0\3\6\1\73\5\6\2\0\1\6\1\0"+
    "\4\6\1\0\1\6\7\0\1\6\3\0\16\6\4\0"+
    "\1\6\10\47\1\50\14\47\1\74\40\47\5\0\11\6"+
    "\2\0\1\6\1\0\4\6\1\0\1\6\7\0\1\6"+
    "\3\0\4\6\1\75\11\6\4\0\1\6\56\0\1\76"+
    "\7\0\10\47\1\50\2\47\1\77\52\47\5\0\11\6"+
    "\2\0\1\6\1\0\4\6\1\0\1\6\2\0\1\100"+
    "\4\0\1\6\3\0\16\6\4\0\1\6\52\0\1\101"+
    "\13\0\10\47\1\102\55\47\46\0\1\103\72\0\1\104"+
    "\12\0\10\47\1\50\26\47\1\62\1\105\25\47\45\0"+
    "\1\106\77\0\1\107\6\0\5\47\3\110\1\111\5\110"+
    "\2\47\1\110\1\47\4\110\1\47\1\110\7\47\1\110"+
    "\3\47\16\110\4\47\1\110\50\0\1\112\66\0\1\113"+
    "\14\0\5\47\3\110\1\111\5\110\2\47\1\110\1\47"+
    "\4\110\1\47\1\110\7\47\1\110\1\47\1\114\1\47"+
    "\16\110\4\47\1\110\5\47\3\110\1\111\5\110\2\47"+
    "\1\110\1\47\4\110\1\47\1\110\7\47\1\115\1\47"+
    "\1\114\1\47\16\110\4\47\1\110\50\0\1\116\75\0"+
    "\1\117\5\0\10\47\1\50\31\47\1\120\30\47\3\110"+
    "\1\111\1\110\1\121\3\110\2\47\1\110\1\47\4\110"+
    "\1\47\1\110\7\47\1\110\1\47\1\114\1\47\16\110"+
    "\4\47\1\110\27\0\1\122\36\0\5\47\3\110\1\111"+
    "\5\110\2\47\1\110\1\47\3\110\1\123\1\47\1\110"+
    "\7\47\1\110\1\47\1\114\1\47\16\110\4\47\1\110"+
    "\51\0\1\124\14\0\5\47\3\110\1\111\2\110\1\125"+
    "\2\110\2\47\1\110\1\47\4\110\1\47\1\110\7\47"+
    "\1\110\1\47\1\114\1\47\16\110\4\47\1\110\52\0"+
    "\1\126\13\0\5\47\3\110\1\127\5\110\2\47\1\110"+
    "\1\47\4\110\1\47\1\110\7\47\1\110\1\47\1\114"+
    "\1\47\16\110\4\47\1\110\5\47\3\110\1\111\5\110"+
    "\2\47\1\110\1\47\4\110\1\47\1\110\7\47\1\115"+
    "\1\105\1\114\1\47\16\110\4\47\1\110";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3726];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\4\11\3\1\4\11\3\1\1\0"+
    "\1\1\1\0\1\1\1\11\3\0\1\11\3\0\6\1"+
    "\1\0\1\1\1\0\5\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\21\0\1\11\1\1\5\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[87];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public __RONLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public __RONLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 22: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 23: break;
          case 3: 
            { return IDENT;
            } 
            // fall through
          case 24: break;
          case 4: 
            { return INTEGER;
            } 
            // fall through
          case 25: break;
          case 5: 
            { return CHAR;
            } 
            // fall through
          case 26: break;
          case 6: 
            { return BRACKETL;
            } 
            // fall through
          case 27: break;
          case 7: 
            { return PARENTHESISL;
            } 
            // fall through
          case 28: break;
          case 8: 
            { return PARENTHESISR;
            } 
            // fall through
          case 29: break;
          case 9: 
            { return BRACKETR;
            } 
            // fall through
          case 30: break;
          case 10: 
            { return BRACEL;
            } 
            // fall through
          case 31: break;
          case 11: 
            { return BRACER;
            } 
            // fall through
          case 32: break;
          case 12: 
            { return COLON;
            } 
            // fall through
          case 33: break;
          case 13: 
            { return COMMA;
            } 
            // fall through
          case 34: break;
          case 14: 
            { return COMMENT;
            } 
            // fall through
          case 35: break;
          case 15: 
            { return FLOAT;
            } 
            // fall through
          case 36: break;
          case 16: 
            { return STRING;
            } 
            // fall through
          case 37: break;
          case 17: 
            { return BOOLEAN;
            } 
            // fall through
          case 38: break;
          case 18: 
            { return SOME;
            } 
            // fall through
          case 39: break;
          case 19: 
            { return RAW_STRING;
            } 
            // fall through
          case 40: break;
          case 20: 
            { return EXTENSION;
            } 
            // fall through
          case 41: break;
          case 21: 
            { return BLOCK_COMMENT;
            } 
            // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
