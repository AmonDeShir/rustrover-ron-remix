{
    parserClass = "com.github.amondeshir.rustroverronremix.language.parser._RONParser"
    parserUtilClass = "com.github.amondeshir.rustroverronremix.language.psi.RONParserUtil"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "RON"
    psiImplClassSuffix = "Impl"
    psiPackage = "com.github.amondeshir.rustroverronremix.language.psi"
    psiImplPackage = "com.github.amondeshir.rustroverronremix.language.psi.impl"

    elementTypeHolderClass = "com.github.amondeshir.rustroverronremix.language.psi.RONTypes"
    elementTypeClass = "com.github.amondeshir.rustroverronremix.language.psi.RONElementType"
    tokenTypeClass = "com.github.amondeshir.rustroverronremix.language.psi.RONTokenType"

    psiImplUtilClass = "com.github.amondeshir.rustroverronremix.language.psi.impl.RONPsiImplUtil"

    tokens = [
        COMMENT = "regexp://.*"
        BLOCK_COMMENT = "BLOCK COMMENT"

        BOOLEAN = "regexp:true|false"

        IDENT = "regexp:[A-Za-z_][A-Za-z0-9_]*"

        INTEGER = "regexp:[+-]?((0x[0-9A-Fa-f][0-9A-Fa-f_]*)|((0[bo]?)?[0-9][0-9_]*))"
        FLOAT = "regexp:([+-]?[0-9]+\.[0-9]*([Ee][0-9]+)?)|(\.[0-9]+([Ee][0-9]+)?)"

        CHAR = "CHAR"
        STRING = "STRING"
        RAW_STRING = "RAW STRING"

        EXT_PREFIX = "#!["
        ENABLE_KEYWORD = "enable"

        PARENTHESISL = "("
        PARENTHESISR = ")"
        BRACKETL = "["
        BRACKETR = "]"
        BRACEL = "{"
        BRACER = "}"
        COLON = ":"
        COMMA = ","
        SOME = "Some"
        NONE = "None"
    ]
}

RON ::= [extensions] value;

extensions ::= ext+;

private recoverBracket ::= !BRACKETR
private ext_body ::= ENABLE_KEYWORD PARENTHESISL IDENT PARENTHESISR {recoverWhile=recoverBracket}
ext ::= EXT_PREFIX ext_body BRACKETR {pin=1}

value ::= bool | integer | float | string | char | option | list | map | object | tuple | object_name;

private bool ::= BOOLEAN;

private integer ::= INTEGER;

private float ::= FLOAT;

private string ::= STRING | RAW_STRING;

private char ::= CHAR;

private recoverParen ::= !PARENTHESISR
private option_body ::= value {recoverWhile=recoverParen}
private option_some ::= SOME PARENTHESISL option_body PARENTHESISR {pin=2}
option ::= option_some | NONE;

private list_body ::= [value (COMMA value)* [COMMA]] {recoverWhile=recoverBracket}
list ::= BRACKETL list_body BRACKETR {pin=1}

private recoverBrace ::= !BRACER
private map_inner_body ::= [map_entry (COMMA map_entry)* [COMMA]] {recoverWhile=recoverBrace}
map ::= BRACEL map_inner_body BRACER {pin=1}

map_key ::= value

private recoverBraceOrComma ::= !(COMMA | BRACER)
map_entry ::= map_key COLON value {recoverWhile=recoverBraceOrComma}

field_name ::= IDENT {implements=["com.intellij.model.psi.PsiExternalReferenceHost"] mixin="com.github.amondeshir.rustroverronremix.language.psi.RONFieldNameMixin"}

named_field ::= field_name COLON value &(COMMA | PARENTHESISR) {pin=2}
// used to avoid parsing the next field name as value if the colon is missing
private colon_value_helper ::= COLON value
early_pinned_named_field ::= field_name colon_value_helper &(COMMA | PARENTHESISR) {pin=1 elementType=named_field}

private recoverField ::= !(COMMA | PARENTHESISR) [object_entry]
// Separate early_pinned_named_field to gracefully handle where colon and value are missing
private object_entry ::= named_field | early_pinned_named_field {recoverWhile=recoverField}


private tuple_inner_body ::= [value (COMMA value)* [COMMA]] {recoverWhile=recoverParen}
tuple_body ::= PARENTHESISL tuple_inner_body PARENTHESISR {pin=1}
tuple ::= [object_name] tuple_body

object_name ::= IDENT {implements=["com.intellij.model.psi.PsiExternalReferenceHost"] mixin="com.github.amondeshir.rustroverronremix.language.psi.RONObjectNameMixin"}
// we require at least one object entry, so we can pin the object, because only after seeing the first entry, we know for sure, this is no tuple
private object_inner_body ::= named_field (COMMA object_entry)* [COMMA] {recoverWhile=recoverParen pin=1}
object_body ::= PARENTHESISL object_inner_body PARENTHESISR
object ::= [object_name] object_body
