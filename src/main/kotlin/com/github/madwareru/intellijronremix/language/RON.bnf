{
    parserClass = "com.github.madwareru.intellijronremix.language.parser._RONParser"
    parserUtilClass = "com.github.madwareru.intellijronremix.language.psi.RONParserUtil"

    extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix = "RON"
    psiImplClassSuffix = "Impl"
    psiPackage = "com.github.madwareru.intellijronremix.language.psi"
    psiImplPackage = "com.github.madwareru.intellijronremix.language.psi.impl"

    elementTypeHolderClass = "com.github.madwareru.intellijronremix.language.psi.RONTypes"
    elementTypeClass = "com.github.madwareru.intellijronremix.language.psi.RONElementType"
    tokenTypeClass = "com.github.madwareru.intellijronremix.language.psi.RONTokenType"

    psiImplUtilClass = "com.github.madwareru.intellijronremix.language.psi.impl.RONPsiImplUtil"

    tokens = [
        COMMENT = "regexp://.*"
        BLOCK_COMMENT = "BLOCK COMMENT"

        BOOLEAN = "regexp:true|false"

        IDENT = "regexp:[A-Za-z_][A-Za-z0-9_]*"

        INTEGER = "regexp:[+-]?((0x[0-9A-Fa-f][0-9A-Fa-f_]*)|((0[bo]?)?[0-9][0-9_]*))"
        FLOAT = "regexp:([+-]?[0-9]+\.[0-9]*([Ee][0-9]+)?)|(\.[0-9]+([Ee][0-9]+)?)"

        CHAR = "regexp:'([ -&(-\[\]-~])|(\\')|(\\\\)'"
        STRING = "regexp:\"([^\r\n\"]|(\\[\S]))*\""
        RAW_STRING = "RAW STRING"

        EXT_PREFIX = "#!["
        ENABLE_KEYWORD = "enable"

        PARENTHESISL = "("
        PARENTHESISR = ")"
        BRACKETL = "["
        BRACKETR = "]"
        BRACEL = "{"
        BRACER = "}"
        COLON = ":"
        COMMA = ","
        SOME = "Some"
        NONE = "None"
    ]
}

RON ::= [extensions] value;

extensions ::= ext+;

ext ::= EXT_PREFIX ENABLE_KEYWORD PARENTHESISL IDENT PARENTHESISR BRACKETR;

value ::= bool | integer | float | string | char | option | list | map | object | enum;

bool ::= BOOLEAN;

private integer ::= INTEGER;

private float ::= FLOAT;

private string ::= STRING | RAW_STRING;

private char ::= CHAR;

option ::= SOME PARENTHESISL value PARENTHESISR | NONE;

list ::= BRACKETL [value (COMMA value)* [COMMA]] BRACKETR;

map ::= BRACEL [map_entry (COMMA map_entry)* [COMMA]] BRACER;

map_key ::= bool | integer | float | string | char | enum;

map_entry ::= map_key COLON value;

named_field ::= IDENT COLON value;

object_entry ::= named_field;

object_body ::= PARENTHESISL [object_entry (COMMA object_entry)* [COMMA]] PARENTHESISR;

tuple_body ::= PARENTHESISL [value (COMMA value)* [COMMA]] PARENTHESISR;

enum ::= IDENT;

object ::= [IDENT] (object_body | tuple_body);
